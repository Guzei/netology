
//  MARK: - –ö—É—Ä—Å–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç ‚Äú–û—Å–Ω–æ–≤—ã Swift advanced‚Äù -

// –í –∫–∞—á–µ—Å—Ç–≤–µ –∫—É—Ä—Å–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –º–æ–¥–µ–ª—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –û–û–ü

// 1.   –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤ –Ω–∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã.
// 1.1. –†–µ—Å—Ç–æ—Ä–∞–Ω
//      –°–≤–æ–π—Å—Ç–≤–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —Å–∫–ª–∞–¥ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏, –º–µ–Ω—é.
// 1.2. –°–æ—Ç—Ä—É–¥–Ω–∏–∫
//      –°–≤–æ–π—Å—Ç–≤–∞: –∏–º—è, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–≤–∞—Ä, –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –∏ —Ç.–¥.).
// 1.3. –ë–ª—é–¥–æ
//      –°–≤–æ–π—Å—Ç–≤–∞: —Ç–∏–ø –±–ª—é–¥–∞ (—Å–∞–ª–∞—Ç, –≥–æ—Ä—è—á–µ–µ, –≥–∞—Ä–Ω–∏—Ä, –¥–µ—Å–µ—Ä—Ç), –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –ª—É–∫, –º—è—Å–æ, —Å–æ–ª—å), –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, —Ü–µ–Ω–∞.
// 1.4. –ó–∞–∫–∞–∑
//      –°–≤–æ–π—Å—Ç–≤–∞: –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤—Ä–µ–º—è –æ—Ç–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞, –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.

//
// 2.   –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
// 2.1. –î–æ–ª–∂–Ω–æ—Å—Ç–∏ (–º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–≤–∞—Ä, –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –∏ —Ç.–¥.) –ø–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª –°–æ—Ç—Ä—É–¥–Ω–∏–∫.
//      –°–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.
//      –î–ª—è –ø–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥—É–º–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π. –ö–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ ‚Äú–≥–æ—Ç–æ–≤–∏—Ç—å‚Äù, –Ω–æ –∏–º–µ—Ç—å –µ—â–µ —Å–≤–æ–∏ –º–µ—Ç–æ–¥—ã.
//      –ù–∞–ø—Ä–∏–º–µ—Ä,
//      - –ø–æ–≤–∞—Ä —Ö–æ–ª–æ–¥–Ω–æ–≥–æ —Ü–µ—Ö–∞ –¥–µ–ª–∞–µ—Ç —Å–∞–ª–∞—Ç—ã;
//      - –ø–æ–≤–∞—Ä –≥–æ—Ä—è—á–µ–≥–æ —Ü–µ—Ö–∞ —É–º–µ–µ—Ç –≤–∞—Ä–∏—Ç—å –∏ –∂–∞—Ä–∏—Ç—å,
//      - —à–µ—Ñ-–ø–æ–≤–∞—Ä —É–º–µ–µ—Ç –≤—Å–µ
//      (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ç–∏–ø—É –±–ª—é–¥–∞).
// 2.2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–ª—é–¥–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª –ë–ª—é–¥–∞.
//      –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–∏–ø–∞ –±–ª—é–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —è–∏—á–Ω–∏—Ü—ã –Ω—É–∂–Ω—ã: —è–π—Ü–∞, –º–∞—Å–ª–æ, —Å–æ–ª—å.
//      –°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 –±–ª—é–¥.
// 2.3. –ó–∞–∫–∞–∑ –ø–æ–¥–ø–∏—à–∏—Ç–µ –ø–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª –ó–∞–∫–∞–∑—ã.
//
// 3.   –°–æ–∑–¥–∞–π—Ç–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:
//    * –ø—Ä–æ–¥—É–∫—Ç—ã (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã), —Ö—Ä–∞–Ω—è—â–∏–µ—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–ø—Ä–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫–æ–π –≤–∏–¥ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å).
//      –°–æ–∑–¥–∞–π—Ç–µ –º–∏–Ω–∏–º—É–º 15 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ.
//    * –∑–∞–∫–∞–∑—ã. –°–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –∑–∞–∫–∞–∑—ã.

// –î–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –¥–æ–ø—É—Å—Ç–∏–º–æ.


//      –ó–∞–¥–∞—á–∞ co –∑–≤–µ–∑–¥–æ—á–∫–æ–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ)

//      –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –≤ –º–µ—Ç–æ–¥–∞—Ö.
//      - –ù–∞–ø—Ä–∏–º–µ—Ä, —É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –º–µ—Ç–æ–¥ ‚Äú–ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑‚Äù –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑.
//      - –ü–æ–≤–∞—Ä –±–µ—Ä–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –≥–æ—Ç–æ–≤–∏—Ç. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å FIFO –∏ LIFO.
//      - –ü–æ—Å–ª–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ ‚Äú–≥–æ—Ç–æ–≤‚Äù.
//      - –ù–∞–ø—Ä–∏–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —É—á–µ—Å—Ç—å, —á—Ç–æ –æ—Ç —Ç–∏–ø–∞ –±–ª—é–¥–∞ –∑–∞–∫–∞–∑ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω—É–∂–Ω—ã–π –ø–æ–≤–∞—Ä –∏–ª–∏ —à–µ—Ñ.
//      –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª—é–±—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.



import Foundation

let db = UserDefaults.standard                      // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ö—Ä–∞–Ω–∏–ª–∏—â :)

// MARK: - FOODS -
//
//      –ù–∞—á–Ω—ë–º —Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏ –ø—Ä. —É–∂–µ –Ω–∞ –Ω–∏—Ö –∑–∞–≤—è–∑–∞–Ω—ã, –ø–æ—ç—Ç–æ–º—É –ø–æ–∑–∂–µ.
//

typealias FoodList = Dictionary<Foods, UInt>        // —ç—Ç–æ —Ç–∏–ø —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ:–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–ª—è —Å–∫–ª–∞–¥–∞ –∏ –¥–ª—è –±–ª—é–¥–∞

typealias Menu = Dictionary<TypeOfDish, Set<NameOfDish>>    // –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –º–Ω–µ –ø–∏—Å–∞—Ç—å —Ç–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–ª–æ–≤–∞–º–∏. –ù–∞–≥–ª—è–¥–Ω–µ–µ –≤—ã—Ö–æ–¥–∏—Ç. –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞.

enum Foods: String, CaseIterable {                  // –ø—Ä–æ–¥—É–∫—Ç—ã (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–º —Å–∫–ª–∞–¥–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥—è—Ç –≤ –±–ª—é–¥–∞
                                                    // ! –°–æ–∑–¥–∞–π—Ç–µ –º–∏–Ω–∏–º—É–º 15 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
    case potatoes
    case onion
    case meat
    case salt
    case eggs
    case butter
    case caesarSalad
    case caesarSaladDressing
    case chicken
    case vodka
    case tomatoJuice
    case sparklingWater
    case prosecco
    case aperolLiqueur
    case oliveOil
}

enum TypeOfDish {

    case salad
    case main
    case side
    case dessert
    case cocktail
}

enum NameOfDish {                                   // –í –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Ç–∞–∫ –æ–∫–∞–∑–∞–ª–æ –æ—á–µ–Ω—å –Ω–∞–≥–ª—è–¥–Ω–æ

    case ü•ó                                         // —Å–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å
    case üç≥                                         // —è–∏—á–Ω–∏—Ü–∞ –≥–ª–∞–∑—É–Ω—å—è
    case ü•©                                         // —Å—Ç–µ–π–∫
    case üçü                                         // –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏
    case üç∞                                         // –ø–∏—Ä–æ–∂–Ω–æ–µ
    case ü•§                                         // –∫–æ–∫—Ç–µ–π–ª—å –ö—Ä–æ–≤–∞–≤–∞—è –ú–µ—Ä–∏
    case üçπ                                         // –∫–æ–∫—Ç–µ–π–ª—å –®–ø—Ä–∏—Ü –ê–ø–µ—Ä–æ–ª—å
}

protocol Dish {                                     // MARK: 1.3. –ë–ª—é–¥–æ

    var type: TypeOfDish {get}                      // ! —Ç–∏–ø –±–ª—é–¥–∞ (—Å–∞–ª–∞—Ç, –≥–æ—Ä—è—á–µ–µ, –≥–∞—Ä–Ω–∏—Ä, –¥–µ—Å–µ—Ä—Ç)
    var food: FoodList {get}                        // ! –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –ª—É–∫, –º—è—Å–æ, —Å–æ–ª—å)
    var time: UInt {get}                            // ! –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è                        // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    var price: UInt {get}                           // ! —Ü–µ–Ω–∞                                       // –≤ —Ä—É–±–ª—è—Ö
    var isReady: Bool {get}                                                                         // –≥–æ—Ç–æ–≤–æ?
}


// MARK: 2.2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–ª—é–¥–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª –ë–ª—é–¥–∞.
// ! –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–∏–ø–∞ –±–ª—é–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —è–∏—á–Ω–∏—Ü—ã –Ω—É–∂–Ω—ã: —è–π—Ü–∞, –º–∞—Å–ª–æ, —Å–æ–ª—å.
// ! –°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 –±–ª—é–¥.

//  –¢—É—Ç —Ö–æ—Ç–µ–ª–æ—Å—å –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ NameOfDish –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±–ª—é–¥, –Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –∫–∞–∫ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

struct FriedEggs: Dish {

    var type: TypeOfDish = .main
    var food: FoodList = [.eggs:2, .butter:1, .salt:1]
    var price: UInt = 500
    internal var time: UInt = 600
    internal var isReady: Bool = false
}

struct CaesarSalad: Dish {

    var type: TypeOfDish = .salad
    var food: FoodList = [.caesarSalad: 1, .caesarSaladDressing: 1, .chicken: 3] // –≠—Ç–æ —Å–∞–ª–∞—Ç –∫—É—Ä–∏—Ü–µ–π –∏–ª–∏ –∫—É—Ä–∏—Ü–∞ —Å —Å–∞–ª–∞—Ç–æ–º?
    var price: UInt = 750
    internal var time: UInt = 500
    internal var isReady: Bool = false
}

struct steak: Dish {

    var type: TypeOfDish = .main
    var food: FoodList = [.meat: 1]
    var time: UInt = 900
    var price: UInt = 1200
    var isReady: Bool = false
}

struct FrenchFries: Dish {

    var type: TypeOfDish = .side
    var food: FoodList = [.potatoes: 2, .salt: 2]
    var time: UInt = 300
    var price: UInt = 200
    var isReady: Bool = false
}

struct BloodyMary: Dish {

    var type: TypeOfDish = .cocktail
    var food: FoodList = [.vodka: 3, .tomatoJuice: 1]
    var time: UInt = 30
    var price: UInt = 300
    var isReady: Bool = false
}

struct AperolSpritz: Dish {

    var type: TypeOfDish = .cocktail
    var food: FoodList = [.aperolLiqueur: 1, .prosecco: 1, .sparklingWater: 2]
    var time: UInt = 60
    var price: UInt = 600
    var isReady: Bool = false
}



// MARK: - ORDERS -
//
//      –î–∞–ª–µ–µ –∑–∞–∫–∞–∑—ã. –û–Ω–∏ –∑–∞–≤–∏–∑—è—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∞ —Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–ª–µ–µ.
//

protocol Orders {                                   // MARK: 1.4. –ó–∞–∫–∞–∑—ã

    var timeIn: Date {get}                          // ! –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    var timePlan: Date? {get}                       // ! –≤—Ä–µ–º—è –æ—Ç–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –ø–æ –ø–ª–∞–Ω—É
    var timeOut: Date? {get}                        //   –≤—Ä–µ–º—è –æ—Ç–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ —Ä–µ–∞–ª—å–Ω–æ–µ
    var dishs: Array<Dish> {get}                    // ! –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ       // –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –≤ –∑–∞–∫–∞–∑–µ -- –Ω–æ—Ä–º–∞
    var isReady: Bool {get}                         // ! –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
}

 struct Order: Orders {                             // MARK: 2.3. –ó–∞–∫–∞–∑ –ø–æ–¥–ø–∏—à–∏—Ç–µ –ø–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª –ó–∞–∫–∞–∑—ã

    var timeIn: Date = Date()
    var timePlan: Date?
    var timeOut: Date? {                            // ! –ü–æ—Å–ª–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ ‚Äú–≥–æ—Ç–æ–≤‚Äù
        didSet {
            isReady = timeOut != nil
        }
    }
    var dishs: Array<Dish> = [] {
        didSet {
            if let dish = dishs.max(by: {$0.time < $1.time}) {              // –∫–∞–∫–æ–µ –±–ª—é–¥–æ –¥–æ–ª—å—à–µ –≤—Å–µ—Ö –≥–æ—Ç–æ–≤–∏—Ç—Å—è
                timePlan = timeIn.addingTimeInterval(Double(dish.time))
            }
        }
    }
    var isReady: Bool = false
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ –±—É–¥–µ—Ç —É–∂–µ –≤–Ω—É—Ç—Ä–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞



// MARK: - person & staff -
//
//      –í–æ—Ç –∏ –¥–æ –ª—é–¥–µ–π –¥–æ–ª–∂–Ω–∞ –æ—á–µ—Ä–µ–¥—å, —Ç.–∫. –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏.
//

typealias Staff = Dictionary<UUID, MemberOfStaff>

enum Sex {
    case male
    case female
}

enum Position {                                     // –¥–æ–ª–∂–Ω–æ—Å—Ç—å

    case cook                                       // –ø–æ–≤–∞—Ä (–≥–æ—Ä—è—á–µ–µ, —Ö–æ–ª–æ–¥–Ω–æ–µ, –∫–æ–Ω–¥–∏—Ç–µ—Ä, –±–∞—Ä–º–µ–Ω...)
    case manager                                    // –º–µ–Ω–µ–¥–∂–µ—Ä
    case garcon                                     // –æ—Ñ–∏—Ü–∏–∞–Ω—Ç
}

protocol Person {                                   // –ø—Ä–æ—Å—Ç–æ —á–µ–ª–æ–≤–µ–∫

    var name: String {get}                          // ! –∏–º—è
    var sex: Sex {get}                              // ! –ø–æ–ª
    var age: UInt8 {get}                            // ! –≤–æ–∑—Ä–∞—Å—Ç
}

protocol MemberOfStaff: Person {                    // MARK: 1.2. –°–æ—Ç—Ä—É–¥–Ω–∏–∫
                                                    //   —á–µ–ª–æ–≤–µ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    var id: UUID {get}
    var position: Position {get}                    // ! –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–≤–∞—Ä, –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –∏ —Ç.–¥.)
}

class Garcon: MemberOfStaff {                      // MARK: 2.1. –î–æ–ª–∂–Ω–æ—Å—Ç–∏. –û—Ñ–∏—Ü–∏–∞–Ω—Ç.

    let id = UUID()
    var name: String
    let sex: Sex
    var age: UInt8
    var position: Position = .garcon

    init(name: String, sex: Sex, age: UInt8) {
        self.name = name
        self.sex = sex
        self.age = age
    }

    func takeOrder(dishs: Set<Menu>) {             // ! –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑.
        print("Order to list")
    }
}

let ira   = Garcon(name: "–ò—Ä–∞" , sex: .female, age: 20)
let misha = Garcon(name: "–ú–∏—à–∞", sex:   .male, age: 20)


// —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
//var juzeppe = Person(name: "Juzeppe", sex:   .male, age: 40)
//var mila    = Person(name: "Mila"   , sex: .female, age: 30)
//var ivan    = Person(name: "Ivan"   , sex:   .male, age: 30)
//var ira     = Person(name: "Ira"    , sex: .female, age: 20)
//var masha   = Person(name: "Masha"  , sex: .female, age: 20)
//




// MARK: - restaurant


protocol Restaurant {                               // MARK: 1.1. –†–µ—Å—Ç–æ—Ä–∞–Ω

    var name: String {get}                        // ! –Ω–∞–∑–≤–∞–Ω–∏–µ
    var staff: Staff {get}                        // ! —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    var menu: Menu {get}                          // ! –º–µ–Ω—é
    var foodRoom: FoodList {get}                  // ! —Å–∫–ª–∞–¥ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    var order: Array<Orders> {get}               //   —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—Å—Ç–µ–∫ —Ç–∏–ø–∞ FIFO) –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–ø–æ–ª–Ω—è–µ–º—ã–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º–∏ –∏ —É–º–µ–Ω—å—à–∞–µ–º—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä–æ–º
}




// MARK: - –º–æ–¥–µ–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–Ω–∞ -
// –ò–µ—Ä–∞—Ä—Ö–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ -- –ê–≥—Ä–µ–≥–∞—Ü–∏—è = –°–ª–∞–±–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è. –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø–∞–¥—É—Ç, –Ω–æ –ª—é–¥–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è.
// –∏–µ—Ä–∞—Ä—Ö–∏—è –¥–ª—è –±–ª—é–¥ -- –ö–æ–º–ø–æ–∑–∏—Ü–∏—è = –í–ª–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –°–∏–ª—å–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è. –ë–ª—é–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã —à–µ—Ñ–æ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–Ω–∞.


struct Butler: Restaurant {

    var name = "Butler"
    var staff = Staff()
    var menu: Menu = [.salad    : [.ü•ó],           // —É –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å–≤–æ—ë –º–µ–Ω—é, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—â–∞—è
                      .main     : [.üç≥,.ü•©],
                      .side     : [.üçü],
                      .dessert  : [.üç∞],
                      .cocktail : [.ü•§, .üçπ]
    ]
    internal var foodRoom = FoodList()              // —Å–∫–ª–∞–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ë—É–¥–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å—Å—è.
    internal var order: Array<Orders> = []         // –≤—Å–µ –∑–∞–∫–∞–∑—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤—Å–µ–º–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º–∏.


    init() {
        self.foodRoom = initFoodRoom()
        self.menu
    }

    // –ó–∞–±–∏—Ä–∞–µ–º –∏–∑ UserDefaults —Ö—Ä–∞–Ω–∏–º—ã–π —Ç–∞–º —Å–ª–æ–≤–∞—Ä—å [String:UInt] –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Å–ª–æ–≤–∞—Ä—å [enum:UInt]
    func initFoodRoom() -> FoodList {
        var foodRoom: FoodList = [:]
        guard let foodRoomDB = db.dictionary(forKey: name) as? [String:UInt] else {
            print("no data for key \"\(name)\"")
            return foodRoom
        }
        for (name, count) in foodRoomDB {
            if let food = Foods(rawValue: name) {
                foodRoom[food] = count
            }
        }
        return foodRoom
    }

    mutating func updateFoodRoom(_ foodList: FoodList) {
        foodList.forEach{ foodRoom[$0] = $1 }
    }

    func toDB() {                                                       // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ
        var foodRoomDB: Dictionary<String, UInt> = [:]                  // —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è –≤ UserDefaults
        foodRoom.forEach{ foodRoomDB[$0.rawValue] = $1 }                // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        db.set(foodRoomDB, forKey: name)                                // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ü–µ–ª–∏–∫–æ–º –≤ –æ–¥–Ω–æ–º –∫–ª—é—á–µ
    }

    mutating func hiringToJob(person: Person, position: Position) {
        let newMemberOfStaff = MemberOfStaff(person: person, positon: position)
        staff[newMemberOfStaff.id] = newMemberOfStaff
    }

    // –∑–∞–ø—Ä–æ—Å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
    // TODO: guard –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    func takeGarcon() -> MemberOfStaff? {
        if let garson = staff.first(where: { $1.vacant && $1.position == .garcon })?.value {
            print("-- –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç \(garson.name), —è –±—É–¥—É –≤–∞—à–∏–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è")
            garson.vacant = false
            return garson
        } else {
            print("–ò–∑–∏–≤–∏–Ω—Ç–µ, –≤—Å–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –∑–∞–Ω—è—Ç—ã")
            return nil
        }
    }
}

var butler = Butler()


// –ù–∞–Ω–∏–º–∞–µ–º –ª—é–¥–µ–π –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
butler.hiringToJob(person: ira, position: .garcon)
butler.hiringToJob(person: masha, position: .garcon)
butler.hiringToJob(person: juzeppe, position: .cook)
butler.hiringToJob(person: mila, position: .cook)
butler.hiringToJob(person: ivan, position: .manager)

print("\n–í —Ä–µ—Å—Ç–æ—Ä–∞–Ω \(butler.name) –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Ä–∞–±–æ—Ç—É:")
butler.staff.forEach{print("\($1.name) - \($1.position)")}


print("\n–ù–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–º —Å–∫–ª–∞–¥–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ \(butler.name) —É–∂–µ –¥–∞–≤–Ω–æ –ª–µ–∂–∞—Ç:")
butler.foodRoom.forEach{ print($0, $1) }

// —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π —Ä–µ—à–∏–ª –Ω–µ –∑–∞–º–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è. –≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞—Ä–º–µ—Ä –≤–≤–æ–¥–∏—Ç—å –ø—Ä–∏–¥—ë—Ç—Å—è. –í–µ–¥—å –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –º–µ–Ω—é –Ω–µ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç. –ù–æ —Å–µ–π—á–∞—Å, –Ω–∞–≤–µ—Ä–æ–Ω–æ–µ, —ç—Ç–æ –Ω–µ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ.
print("\n–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ \(butler.name):")
for (type, dishSet) in butler.menu {
    print("\n------------------\n", type)
    for name in dishSet {
        print(name)
    }
}

// –∑–∞–Ω—è—Ç—ã–µ —Ä–∞–±–æ—Ç–æ–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –∏ –ø—Ä–∏–Ω—è—Ç—ã–µ –∏–º–∏ –∑–∞–∫–∞–∑—ã
var busyGarson: [UUID:[NameOfDish]] = [:]

print("\n-- –û—Ñ–∏—Ü–∏–∞–Ω—Ç!")
if let garson = butler.takeGarcon() {
    print("-- \(garson.name), –¥–≤–µ —è–∏—á–Ω–∏—Ü—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –ì–ª–∞–∑—É–Ω—å–∏!")
    busyGarson[garson.id] = [.üç≥,.üç≥]
    print("-- –î–∞, –∏ –∫–æ–∫–Ω–µ–π–ª—å –ö—Ä–æ–≤–∞–≤–∞—è –ú—ç—Ä–∏, —á—É—Ç—å –Ω–µ –∑–∞–±—ã–ª")
    busyGarson[garson.id]! += [.ü•§]
    print("-- –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –í–∞—à –∑–∞–∫–∞–∑:", terminator: " ")
    busyGarson[garson.id]!.forEach{print($0, terminator: " ")}
}

print("\n-- –û—Ñ–∏—Ü–∏–∞–Ω—Ç!")
if let garson = butler.takeGarcon() {
    print("-- \(garson.name), –º–Ω–µ –∫–æ–∫—Ç–µ–π–ª—å—á–∏–∫–∞ —Ö–æ—á–µ—Ç—Å—è")
    let menuItem = butler.menu[.cocktail]?.randomElement() ?? .ü•§
    print("–ù–µ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å \(menuItem)?")
    print("–ì–æ–¥–∏—Ç—Å—è!")
    busyGarson[garson.id] = [.ü•§]
    print("-- –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –í–∞—à –∑–∞–∫–∞–∑:", terminator: " ")
    busyGarson[garson.id]!.forEach{print($0, terminator: " ")}
}

print("\n-- –û—Ñ–∏—Ü–∏–∞–Ω—Ç!")
if let garson = butler.takeGarcon() {
    let menuItem = butler.menu[.cocktail]?.randomElement() ?? .none
    if menuItem != .none {
        print("-- \(garson.name), —Ö–æ—á—É \(String(describing: menuItem)), –¥–∞ –ø–æ–±—ã—Å—Ç—Ä–µ–µ!")
    }
    // —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –¥–≤–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –∏ —ç—Ç–æ–º—É –≥–æ—Ç—é –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–∞–∑
}

// –û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –ø–æ–Ω–µ—Å–ª–∏ –∑–∞–∫–∞–∑—ã –Ω–∞ –∫—É—Ö–Ω—é
busyGarson.forEach { (id, dishs) in
    let garson = butler.staff[id]!                     // —Å–º–µ–ª–æ —Ñ–æ—Ä—Å–∏–º, —Ç.–∫. id —Å—é–¥–∞ –ø—Ä–∏—à–ª–æ –Ω–∞–¥—ë–∂–Ω–æ–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ.
    garson.takeOrder(dishs)
    garson.vacant = true                     // —Å–º–µ–ª–æ —Ñ–æ—Ä—Å–∏–º, —Ç.–∫. id —Å—é–¥–∞ –ø—Ä–∏—à–ª–æ –Ω–∞–¥—ë–∂–Ω–æ–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ.
}



butler.updateFoodRoom([.salt:2, .eggs:80, .potatoes:2, .onion:5])
butler.toDB()





//var menu = [FriedEggs.self, CaesarSalad.self] as [Any]
//


//struct Manager: MemberOfStaff {                     // MARK: 2.1. –î–æ–ª–∂–Ω–æ—Å—Ç–∏. –ú–µ–Ω–µ–¥–∂–µ—Ä.
//
//    let id: UUID
//    var name: String
//    let sex: Sex
//    var age: UInt8
//    var position: Position
//}
//
//protocol Cooking {
//    func cooking()
//}
//struct Cook: MemberOfStaff, Cooking {               // MARK: 2.1. –î–æ–ª–∂–Ω–æ—Å—Ç–∏. –ü–æ–≤–∞—Ä.
//
//    let id: UUID
//    var name: String
//    let sex: Sex
//    var age: UInt8
//    var position: Position
//
//    func cooking() {                                // ! –ü–æ–≤–∞—Ä –±–µ—Ä–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –≥–æ—Ç–æ–≤–∏—Ç.
//        print("Cook")
//    }
//}
//
//protocol CookingDessert {                           // MARK: 2.1. –î–æ–ª–∂–Ω–æ—Å—Ç–∏. –ö–æ–Ω—Ç–¥–∏—Ç–µ—Ä.
//    func cooking()
//}
//struct Confectioner: MemberOfStaff, CookingDessert {
//
//    let id: UUID
//    var name: String
//    let sex: Sex
//    var age: UInt8
//    var position: Position
//
//    func cooking() {
//        print("Dessert cooking...")
//        print("Dessert is ready")
//    }
//}



//extension Position {
//    var who: String {
//        switch self {
//        case .cook([.salad, .main]):    return String("–®–µ—Ñ")
//        case .cook([.dessert]):         return String("–ö–æ–Ω–¥–∏—Ç–µ—Ä")
//        case .cook(_):                  return Cooking
//        case .manager:                  return String("–ú–µ–Ω–µ–¥–∂–µ—Ä")
//        case .garcon:                   return String("–û—Ñ–∏—Ü–∏–∞–Ω—Ç")
//        }
//    }
//}


//extension Position {
//    var who: MemberOfStaff, Cooking {
//        switch self {
//        case .cook([.salad, .main]):    return Cook.self as! MemberOfStaff
//        case .cook([.dessert]):         return Confectioner.self as! MemberOfStaff
//        case .cook(_):                  return Cook.self as! MemberOfStaff
////        case .manager:                  return Manager.self as! MemberOfStaff
////        case .garcon:                   return Garcon.self as! MemberOfStaff
//        }
//    }
//}

//enum Menu: CaseIterable, Hashable {
//
//    static var allCases: [Menu] {
//        return [.—Å–∞–ª–∞—Ç–¶–µ–∑–∞—Ä—å (type: .salad   , foods: [.eggs    :1]),
//                .–æ–º–ª–µ—Ç       (type: .main    , foods: [.eggs    :2]),
//                .—Å—Ç–µ–π–∫       (type: .main    , foods: [.meat    :1]),
//                .–º–µ–¥–æ–≤–∏–∫     (type: .dessert , foods: [.eggs    :1]),
//                .–∫—Ä–æ–≤–∞–≤–∞—è–ú–µ—Ä–∏(type: .cocktail, foods: [.potatoes:1])
//        ]
//    }
//    case —Å–∞–ª–∞—Ç–¶–µ–∑–∞—Ä—å(type: TypeOfDish, foods: FoodList)                                // CaesarSalad
//    case –æ–º–ª–µ—Ç(type: TypeOfDish, foods: FoodList)                                      // Omelette
//    case —Å—Ç–µ–π–∫(type: TypeOfDish, foods: FoodList)
//    case –º–µ–¥–æ–≤–∏–∫(type: TypeOfDish, foods: FoodList)
//    case –∫—Ä–æ–≤–∞–≤–∞—è–ú–µ—Ä–∏(type: TypeOfDish, foods: FoodList)
//}


//var typeOfDish: TypeOfDish = (.main)
//
//switch typeOfDish {
//case .main, .salad:
//    break
//case .side:
//    break
//case .dessert:
//    break
//case .cocktail:
//    break
//}


//typealias Menu = Dictionary<TypeOfDish, Set<String>>  // –í–Ω—É—Ç—Ä–∏ —Ç–∏–ø–∞ –±–ª—é–¥ –≤—Å–µ –ø—É–Ω–∫—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
//typealias Menu1 = Set<Dish>
//class Person: PersonPr {                            //   –õ—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –Ω–∞–Ω—è—Ç—ã –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
//
//    var name: String
//    var sex: Sex
//    var age: UInt8
//
//    init(name: String, sex: Sex, age: UInt8) {
//        self.name = name
//        self.sex = sex
//        self.age = age
//    }
//}
//
//class MemberOfStaff: Person {                 // MARK: 1.2. –°–æ—Ç—Ä—É–¥–Ω–∏–∫
//    var id: UUID = UUID()                           //   —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª–µ –∫–∞–¥—Ä–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
//    var position: Position                          // ! –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–≤–∞—Ä, –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –∏ —Ç.–¥.)
//    var vacant: Bool = true                         //   —Å—Ç–∞—Ç—É—Å: —Å–≤–æ–±–æ–¥–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –∑–∞–Ω—è—Ç (—É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç)
//
//    init(person: Person, positon: Position) {
//        self.position = positon
//        super.init(name: person.name, sex: person.sex, age: person.age)
//    }
//}




