
//  MARK: - –ö—É—Ä—Å–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç ‚Äú–û—Å–Ω–æ–≤—ã Swift advanced‚Äù -

// –í –∫–∞—á–µ—Å—Ç–≤–µ –∫—É—Ä—Å–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –º–æ–¥–µ–ª—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –û–û–ü

// 1.   –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤ –Ω–∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã.
// 1.1. –†–µ—Å—Ç–æ—Ä–∞–Ω
//      –°–≤–æ–π—Å—Ç–≤–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —Å–∫–ª–∞–¥ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏, –º–µ–Ω—é.
// 1.2. –°–æ—Ç—Ä—É–¥–Ω–∏–∫
//      –°–≤–æ–π—Å—Ç–≤–∞: –∏–º—è, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–≤–∞—Ä, –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –∏ —Ç.–¥.).
// 1.3. –ë–ª—é–¥–æ
//      –°–≤–æ–π—Å—Ç–≤–∞: —Ç–∏–ø –±–ª—é–¥–∞ (—Å–∞–ª–∞—Ç, –≥–æ—Ä—è—á–µ–µ, –≥–∞—Ä–Ω–∏—Ä, –¥–µ—Å–µ—Ä—Ç), –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –ª—É–∫, –º—è—Å–æ, —Å–æ–ª—å), –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, —Ü–µ–Ω–∞.
// 1.4. –ó–∞–∫–∞–∑
//      –°–≤–æ–π—Å—Ç–≤–∞: –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤—Ä–µ–º—è –æ—Ç–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞, –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.

//
// 2.   –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
// 2.1. –î–æ–ª–∂–Ω–æ—Å—Ç–∏ (–º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–≤–∞—Ä, –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –∏ —Ç.–¥.) –ø–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª –°–æ—Ç—Ä—É–¥–Ω–∏–∫.
//      –°–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.
//      –î–ª—è –ø–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥—É–º–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π. –ö–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ ‚Äú–≥–æ—Ç–æ–≤–∏—Ç—å‚Äù, –Ω–æ –∏–º–µ—Ç—å –µ—â–µ —Å–≤–æ–∏ –º–µ—Ç–æ–¥—ã.
//      –ù–∞–ø—Ä–∏–º–µ—Ä,
//      - –ø–æ–≤–∞—Ä —Ö–æ–ª–æ–¥–Ω–æ–≥–æ —Ü–µ—Ö–∞ –¥–µ–ª–∞–µ—Ç —Å–∞–ª–∞—Ç—ã;
//      - –ø–æ–≤–∞—Ä –≥–æ—Ä—è—á–µ–≥–æ —Ü–µ—Ö–∞ —É–º–µ–µ—Ç –≤–∞—Ä–∏—Ç—å –∏ –∂–∞—Ä–∏—Ç—å,
//      - —à–µ—Ñ-–ø–æ–≤–∞—Ä —É–º–µ–µ—Ç –≤—Å–µ
//      (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ç–∏–ø—É –±–ª—é–¥–∞).
// 2.2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–ª—é–¥–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª –ë–ª—é–¥–∞.
//      –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–∏–ø–∞ –±–ª—é–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —è–∏—á–Ω–∏—Ü—ã –Ω—É–∂–Ω—ã: —è–π—Ü–∞, –º–∞—Å–ª–æ, —Å–æ–ª—å.
//      –°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 –±–ª—é–¥.
// 2.3. –ó–∞–∫–∞–∑ –ø–æ–¥–ø–∏—à–∏—Ç–µ –ø–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª –ó–∞–∫–∞–∑—ã.
//
// 3.   –°–æ–∑–¥–∞–π—Ç–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:
//    * –ø—Ä–æ–¥—É–∫—Ç—ã (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã), —Ö—Ä–∞–Ω—è—â–∏–µ—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–ø—Ä–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫–æ–π –≤–∏–¥ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å).
//      –°–æ–∑–¥–∞–π—Ç–µ –º–∏–Ω–∏–º—É–º 15 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ.
//    * –∑–∞–∫–∞–∑—ã. –°–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –∑–∞–∫–∞–∑—ã.

// –î–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –¥–æ–ø—É—Å—Ç–∏–º–æ.


//      –ó–∞–¥–∞—á–∞ co –∑–≤–µ–∑–¥–æ—á–∫–æ–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ)

//      –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –≤ –º–µ—Ç–æ–¥–∞—Ö.
//      - –ù–∞–ø—Ä–∏–º–µ—Ä, —É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –º–µ—Ç–æ–¥ ‚Äú–ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑‚Äù –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑.
//      - –ü–æ–≤–∞—Ä –±–µ—Ä–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –≥–æ—Ç–æ–≤–∏—Ç. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å FIFO –∏ LIFO.
//      - –ü–æ—Å–ª–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ ‚Äú–≥–æ—Ç–æ–≤‚Äù.
//      - –ù–∞–ø—Ä–∏–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —É—á–µ—Å—Ç—å, —á—Ç–æ –æ—Ç —Ç–∏–ø–∞ –±–ª—é–¥–∞ –∑–∞–∫–∞–∑ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω—É–∂–Ω—ã–π –ø–æ–≤–∞—Ä –∏–ª–∏ —à–µ—Ñ.
//      –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª—é–±—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.


//
//  –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –ø–æ–±–æ–ª—å—à–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å —á—Ç–æ —É—á–∏–ª–∏: –¥–µ–ª–µ–≥–∞—Ç—ã, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è, extension
//      pushOrder() - –∫–∞–∫ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ–≥–æ
//  –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—á–∞—è–Ω–Ω–æ –æ—Å–Ω–æ–≤–∏–ª UserDefaults —Ä–µ—à–∏–≤, —á—Ç–æ —ç—Ç–æ –∏ –µ—Å—Ç—å "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ", –Ω–æ –ø–æ—Ç–æ–º —É—Å–æ–º–Ω–∏–ª—Å—è.
//      –†–µ—à–∏–ª –∑–∞–¥–∞—á—É –∑–∞–ø–∏—Å–∏ —Å–ª–æ–≤–∞—Ä—è —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –≤ UserDefaults
//  —Å –∑–∞–∫–∞–∑–∞–º–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ "–∑–∞–ø–∏—Å—å –Ω–∞ –±—É–º–∞–∂–∫—É —É —Å—Ç–æ–ª–∏–∫–∞" –∏ –ø–æ—Ç–æ–º "–∑–∞–ø–∏—Å—å –≤ –∫–∞—Å—Å—É —Å –ø—Ä–æ–≤—Ä–µ–∫–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç—å"
//  –í –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π –±–ª—é–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã. –û—á–µ–Ω—å —Ö–æ—Ç–µ–ª–æ—Å—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–∞–∫ —ç—Ç–æ —Ä–∞–æ—Ç–∞–µ—Ç. –û–∫–∞–∑–∞–ª–æ—Å—å –æ—á–µ–Ω—å –Ω–∞–≥–ª—è–¥–Ω–æ, –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.
//      –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–ª–æ–≤–∞ —Ä–µ–ø–ª–µ–π—Å–æ–º –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
//


import Foundation

let db = UserDefaults.standard                      // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ö—Ä–∞–Ω–∏–ª–∏—â :)

typealias FoodList = Dictionary<Food, UInt>         // —ç—Ç–æ —Ç–∏–ø —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ:–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–ª—è —Å–∫–ª–∞–¥–∞ –∏ –¥–ª—è –±–ª—é–¥–∞

typealias Menu = Dictionary<TypeOfDish, Set<NameOfDish>>    // –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –º–Ω–µ –ø–∏—Å–∞—Ç—å —Ç–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–ª–æ–≤–∞–º–∏. –ù–∞–≥–ª—è–¥–Ω–µ–µ –≤—ã—Ö–æ–¥–∏—Ç. –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞.

typealias PreOrder = Array<NameOfDish>              // –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑. –¢–æ–ª—å–∫–æ –∏–º–µ–Ω–∞.

//
// MARK: - FOODS -
//
//      –ù–∞—á–Ω—ë–º —Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏ –ø—Ä. —É–∂–µ –Ω–∞ –Ω–∏—Ö –∑–∞–≤—è–∑–∞–Ω—ã, –ø–æ—ç—Ç–æ–º—É –ø–æ–∑–∂–µ.
//


enum Food: String, CaseIterable {                   // –ø—Ä–æ–¥—É–∫—Ç—ã (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–º —Å–∫–ª–∞–¥–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥—è—Ç –≤ –±–ª—é–¥–∞
                                                    // ! –°–æ–∑–¥–∞–π—Ç–µ –º–∏–Ω–∏–º—É–º 15 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
    case potatoes
    case onion
    case meat
    case salt
    case eggs
    case butter
    case caesarSalad
    case caesarSaladDressing
    case chicken
    case vodka
    case tomatoJuice
    case sparklingWater
    case prosecco
    case aperolLiqueur
    case oliveOil
    case flour
}

enum TypeOfDish {

    case salad
    case main
    case side
    case dessert
    case cocktail
}

enum NameOfDish {

    case ü•ó                                         // —Å–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å
    case üç≥                                         // —è–∏—á–Ω–∏—Ü–∞ –≥–ª–∞–∑—É–Ω—å—è
    case ü•©                                         // —Å—Ç–µ–π–∫
    case üçü                                         // –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏
    case üç∞                                         // –±–∏—Å–∫–≤–∏—Ç
    case ü•§                                         // –∫–æ–∫—Ç–µ–π–ª—å –ö—Ä–æ–≤–∞–≤–∞—è –ú–µ—Ä–∏
    case üçπ                                         // –∫–æ–∫—Ç–µ–π–ª—å –®–ø—Ä–∏—Ü –ê–ø–µ—Ä–æ–ª—å
}

protocol Dish {                                     // MARK: 1.3. –ë–ª—é–¥–æ

    var name: NameOfDish {get}
    var type: TypeOfDish {get}                      // ! —Ç–∏–ø –±–ª—é–¥–∞ (—Å–∞–ª–∞—Ç, –≥–æ—Ä—è—á–µ–µ, –≥–∞—Ä–Ω–∏—Ä, –¥–µ—Å–µ—Ä—Ç)
    var food: FoodList {get}                        // ! –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –ª—É–∫, –º—è—Å–æ, —Å–æ–ª—å)
    var time: UInt {get}                            // ! –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è                        // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    var price: UInt {get}                           // ! —Ü–µ–Ω–∞                                       // –≤ —Ä—É–±–ª—è—Ö
    var isReady: Bool {get}                                                                         // –≥–æ—Ç–æ–≤–æ? –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤, –∫–æ–≥–¥–∞ –≤—Å–µ –±–ª—é–¥–∞ –≥–æ—Ç–æ–≤—ã
}
extension Dish {
    func printSelf() {
        print("Dish name: \(name), of type \(type), with price \(price), time to ready [sec] - \(time) \(isReady ? "is Ready!" : "no reade yet" )")
        print("ingredients:")
        food.forEach{print($0,$1)}
    }
}


// MARK: 2.2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–ª—é–¥–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª –ë–ª—é–¥–∞.
// ! –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–∏–ø–∞ –±–ª—é–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —è–∏—á–Ω–∏—Ü—ã –Ω—É–∂–Ω—ã: —è–π—Ü–∞, –º–∞—Å–ª–æ, —Å–æ–ª—å.
// ! –°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 –±–ª—é–¥.

//  –¢—É—Ç —Ö–æ—Ç–µ–ª–æ—Å—å –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ NameOfDish –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±–ª—é–¥, –Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –∫–∞–∫ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

struct FriedEggs: Dish {

    let name: NameOfDish = .üç≥
    let type: TypeOfDish = .main
    let food: FoodList = [.eggs:2, .butter:1, .salt:1]          // –∏–Ω–æ–≥–¥–∞ —Å–æ—Å—Ç–∞–≤ –ø–∏—à—É—Ç –≤ –º–µ–Ω—é –ø–æ–¥—Ä–æ–±–Ω–æ
    let price: UInt = 500
    internal let time: UInt = 600
    internal let isReady: Bool = false
}

struct CaesarSalad: Dish {

    let name: NameOfDish = .ü•ó
    let type: TypeOfDish = .salad
    let food: FoodList = [.caesarSalad: 1, .caesarSaladDressing: 1, .chicken: 3] // –≠—Ç–æ —Å–∞–ª–∞—Ç –∫—É—Ä–∏—Ü–µ–π –∏–ª–∏ –∫—É—Ä–∏—Ü–∞ —Å —Å–∞–ª–∞—Ç–æ–º?
    let price: UInt = 750
    internal let time: UInt = 500
    internal let isReady: Bool = false
}

struct Steak: Dish {

    let name: NameOfDish = .ü•©
    let type: TypeOfDish = .main
    let food: FoodList = [.meat: 1]
    let price: UInt = 1200
    internal let time: UInt = 900
    internal let isReady: Bool = false
}

struct FrenchFries: Dish {

    let name: NameOfDish = .üçü
    let type: TypeOfDish = .side
    let food: FoodList = [.potatoes: 2, .salt: 2]
    let price: UInt = 200
    internal let time: UInt = 300
    internal let isReady: Bool = false
}

struct Biscuit: Dish {

    let name: NameOfDish = .üç∞
    let type: TypeOfDish = .dessert
    let food: FoodList = [.eggs: 5, .butter: 100, .flour: 100]
    let price: UInt = 500
    internal let time: UInt = 3600
    internal let isReady: Bool = false
}

struct BloodyMary: Dish {

    let name: NameOfDish = .ü•§
    let type: TypeOfDish = .cocktail
    let food: FoodList = [.vodka: 3, .tomatoJuice: 1]
    let price: UInt = 300
    internal let time: UInt = 30
    internal let isReady: Bool = false
}

struct AperolSpritz: Dish {

    let name: NameOfDish = .üçπ
    let type: TypeOfDish = .cocktail
    let food: FoodList = [.aperolLiqueur: 1, .prosecco: 1, .sparklingWater: 2]
    let price: UInt = 600
    internal let time: UInt = 60
    internal let isReady: Bool = false
}



// MARK: - ORDERS -
//
//      –î–∞–ª–µ–µ –∑–∞–∫–∞–∑—ã. –û–Ω–∏ –∑–∞–≤–∏–∑—è—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∞ —Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–ª–µ–µ.
//

protocol Orders {                                   // MARK: 1.4. –ó–∞–∫–∞–∑—ã

    var timeIn: Date {get}                          // ! –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    var timePlan: Date? {get}                       // ! –≤—Ä–µ–º—è –æ—Ç–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –ø–æ –ø–ª–∞–Ω—É
    var timeOut: Date? {get}                        //   –≤—Ä–µ–º—è –æ—Ç–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ —Ä–µ–∞–ª—å–Ω–æ–µ
    var dishs: Array<Dish> {get}                    // ! –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ // –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –≤ –∑–∞–∫–∞–∑–µ -- –Ω–æ—Ä–º–∞.
    var isReady: Bool {get}                         // ! –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
}
extension Orders {
    func printSelf() {
        print("\n -- Order --")
        print("TimeIn: ", timeIn)
        print("TimeOut: ", timeOut ?? "no information")
        print("TimePlan: ", timePlan ?? "no information")
        print("Redy?:", isReady)
        dishs.forEach { $0.printSelf() }
    }
}

struct Order: Orders {                             // MARK: 2.3. –ó–∞–∫–∞–∑ –ø–æ–¥–ø–∏—à–∏—Ç–µ –ø–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª –ó–∞–∫–∞–∑—ã

    var timeIn: Date = Date()
    var timePlan: Date?
    var timeOut: Date? {                            // ! –ü–æ—Å–ª–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ ‚Äú–≥–æ—Ç–æ–≤‚Äù
        didSet {
            isReady = timeOut != nil
        }
    }
    var dishs: Array<Dish> = [] {
        didSet {
            if let dish = dishs.max(by: {$0.time < $1.time}) {              // –∫–∞–∫–æ–µ –±–ª—é–¥–æ –¥–æ–ª—å—à–µ –≤—Å–µ—Ö –≥–æ—Ç–æ–≤–∏—Ç—Å—è
                timePlan = timeIn.addingTimeInterval(Double(dish.time))
            }
        }
    }
    var isReady: Bool = false
}



// MARK: - persons & staff -
//
//      –í–æ—Ç –∏ –¥–æ –ª—é–¥–µ–π –¥–æ—à–ª–∞ –æ—á–µ—Ä–µ–¥—å, —Ç.–∫. –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏.
//

typealias Staff = Array<MemberOfStaff>

enum Sex { case male, female }

enum Position {                                     // –¥–æ–ª–∂–Ω–æ—Å—Ç—å

    case cook                                       // –ø–æ–≤–∞—Ä (–≥–æ—Ä—è—á–µ–µ, —Ö–æ–ª–æ–¥–Ω–æ–µ, –∫–æ–Ω–¥–∏—Ç–µ—Ä, –±–∞—Ä–º–µ–Ω...)
    case manager                                    // –º–µ–Ω–µ–¥–∂–µ—Ä
    case garcon                                     // –æ—Ñ–∏—Ü–∏–∞–Ω—Ç
}

protocol MemberOfStaff {                            // MARK: 1.2. –°–æ—Ç—Ä—É–¥–Ω–∏–∫

    var name: String {get}                          // ! –∏–º—è
    var sex: Sex {get}                              // ! –ø–æ–ª
    var age: UInt8 {get}                            // ! –≤–æ–∑—Ä–∞—Å—Ç
    var position: Position {get}                    // ! –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–≤–∞—Ä, –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –∏ —Ç.–¥.)
    //var vacant: Bool {get}                          //   –ª—é–±–æ–π —á–ª–µ–Ω –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç –∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –Ω–∏ –≥–æ—Ç–æ–≤–∏—Ç—å, –Ω–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã.
}

enum Errors: Error {
    case food(food: Food)
    case count(food: Food, count: UInt, countInRoom: UInt)
    case sorry(dishName: NameOfDish)
}

// –ê –≤–æ—Ç –∏ –¥–µ–ª–µ–≥–∞—Ç—ã –ø–æ—à–ª–∏. –ë—É–¥–µ–º –ø–æ—Ä—É—á–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –Ω–∞ –µ–≥–æ —Å–∫–ª–∞–¥–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.
// –ö—Ç–æ –∫–∞–∫ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–∫–ª–∞–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–∞–∫–∞–∑–æ–≤ –ª—É—á—à–µ –≤—Å–µ—Ö –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç?
protocol CheckFoodsInRoom {
    func checkFoodsInRoom(foodList: FoodList) throws
}
protocol PushToOrders {
    func pushToOrders(_ order: Order)
}

class Garcon: MemberOfStaff {
                                                    // MARK: 2.1. –î–æ–ª–∂–Ω–æ—Å—Ç–∏. –û—Ñ–∏—Ü–∏–∞–Ω—Ç.
                                                    // ! –ø–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª –°–æ—Ç—Ä—É–¥–Ω–∏–∫
    var name: String
    let sex: Sex
    var age: UInt8
    var position: Position = .garcon
    var vacant = true                               // —Å–≤–æ–±–æ–¥–µ–Ω. –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑.
    var preOrder: PreOrder = []                     // –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ –±—É–º–∞–∂–∫—É —É —Å—Ç–æ–ª–∏–∫–∞ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
    var rest: CheckFoodsInRoom & PushToOrders

    init(name: String, sex: Sex, age: UInt8, rest: CheckFoodsInRoom & PushToOrders) {
        self.name = name
        self.sex = sex
        self.age = age
        self.rest = rest
    }

    func pushOrder() throws {                       // ! –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑.
                                                    //   –Ω–∞—á–∞–ª–æ -- –∑–Ω–∞—á–∏—Ç –∫–ª–∞–¥—ë–º –≤ first, –∞ –∑–∞–±–∏—Ä–∞–µ—Ç—å –±—É–¥–µ–º last
                                                    //   –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                                                    //   –ø–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –±—É–º–∞–∂–∫—É –Ω–∞–∑–≤–∞–Ω–∏—è–º –±–ª—é–¥ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –Ω–∞ –∫–∞—Å—Å–µ (–≤ –ë–î)
        try preOrder.forEach({ dishName in

            // 1. –±–µ—Ä—ë–º —Ä–µ—Ü–µ–ø—Ç –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
            var dish: Dish {
                switch dishName {
                case .ü•ó: return CaesarSalad()
                case .üç≥: return FriedEggs()
                case .ü•©: return Steak()
                case .üçü: return FrenchFries()
                case .üç∞: return Biscuit()
                case .ü•§: return BloodyMary()
                case .üçπ: return AperolSpritz()
                }
            }

            do {
                try rest.checkFoodsInRoom(foodList: dish.food)
                print("-- –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –±–ª—é–¥–∞ \(dish.name) –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ë—É–¥–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å.")
                // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –∏ –≤–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ —Å—Ç–µ–∫
                let order = Order( dishs: [dish])
                rest.pushToOrders(order)
            }
            catch {throw Errors.sorry(dishName: dish.name)}
        })
        // –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        vacant = true
        preOrder = []
    }
}

struct Manager: MemberOfStaff {                     // MARK: 2.1. –î–æ–ª–∂–Ω–æ—Å—Ç–∏. –ú–µ–Ω–µ–¥–∂–µ—Ä.

    var name: String
    let sex: Sex
    var age: UInt8
    var position: Position = .manager
}

protocol Cooking {
    func cooking()
}
struct Cook: MemberOfStaff, Cooking {               // MARK: 2.1. –î–æ–ª–∂–Ω–æ—Å—Ç–∏. –ü–æ–≤–∞—Ä.

    var name: String
    let sex: Sex
    var age: UInt8
    var position: Position = .cook

    func cooking() {                                // ! –ü–æ–≤–∞—Ä –±–µ—Ä–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –≥–æ—Ç–æ–≤–∏—Ç.
        print("Cook")
    }
}

protocol CookingDessert {                           // MARK: 2.1. –î–æ–ª–∂–Ω–æ—Å—Ç–∏. –ö–æ–Ω—Ç–¥–∏—Ç–µ—Ä.
    func cooking()
}
struct Confectioner: MemberOfStaff, CookingDessert {

    var name: String
    let sex: Sex
    var age: UInt8
    var position: Position = .cook

    func cooking() {
        print("Dessert cooking...")
        print("Dessert is ready")
    }
}



// MARK: - restaurant

protocol Restaurant {                               // MARK: 1.1. –†–µ—Å—Ç–æ—Ä–∞–Ω

    var name: String {get}                          // ! –Ω–∞–∑–≤–∞–Ω–∏–µ
    var staff: Staff {get}                          // ! —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    var menu: Menu {get}                            // ! –º–µ–Ω—é
    var foodRoom: FoodList {get}                    // ! —Å–∫–ª–∞–¥ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
}


// MARK: - –º–æ–¥–µ–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–Ω–∞ -

class Butler: Restaurant, CheckFoodsInRoom, PushToOrders {

    var name = "Butler"
    var staff: Staff = []
    var menu: Menu = [.salad    : [.ü•ó],           // —É –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å–≤–æ—ë –º–µ–Ω—é, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—â–∞—è
                      .main     : [.üç≥, .ü•©],
                      .side     : [.üçü],
                      .dessert  : [.üç∞],
                      .cocktail : [.ü•§, .üçπ]
    ]

                                                    // MARK: 3.   –°–æ–∑–¥–∞–π—Ç–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:
    var foodRoom = FoodList()                       // ! —Å–∫–ª–∞–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
    var orders: Array<Orders> = []                  // ! –∑–∞–∫–∞–∑—ã. –°–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –∑–∞–∫–∞–∑—ã.
                                                    //   —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ -- —Å—Ç–µ–∫ —Ç–∏–ø–∞ FIFO --  –Ω–∞–ø–æ–ª–Ω—è–µ–º—ã–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º–∏ –∏ —É–º–µ–Ω—å—à–∞–µ–º—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä–æ–º –∏ –±–∞—Ä–º–µ–Ω–æ–º

    init() {
        self.foodRoom = initFoodRoom()
        self.menu
    }

    // –ó–∞–±–∏—Ä–∞–µ–º –∏–∑ UserDefaults —Ö—Ä–∞–Ω–∏–º—ã–π —Ç–∞–º —Å–ª–æ–≤–∞—Ä—å [String:UInt] –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Å–ª–æ–≤–∞—Ä—å [enum:UInt]
    func initFoodRoom() -> FoodList {
        var foodRoom: FoodList = [:]
        guard let foodRoomDB = db.dictionary(forKey: name) as? [String:UInt] else {
            print("no data for key \"\(name)\"")
            return foodRoom
        }
        for (name, count) in foodRoomDB {
            if let food = Food(rawValue: name) {
                foodRoom[food] = count
            }
        }
        return foodRoom
    }

    func updateFoodRoom(_ foodList: FoodList) {
        foodList.forEach{ foodRoom[$0] = $1 }
    }

    func toDB() {                                                       // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ
        var foodRoomDB: Dictionary<String, UInt> = [:]                  // —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞—Ä—è –≤ UserDefaults
        foodRoom.forEach{ foodRoomDB[$0.rawValue] = $1 }                // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        db.set(foodRoomDB, forKey: name)                                // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ü–µ–ª–∏–∫–æ–º –≤ –æ–¥–Ω–æ–º –∫–ª—é—á–µ
    }

    func printStaff() {
        print("\n–í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ \(butler.name) —Ä–∞–±–æ—Ç–∞—é—Ç:")
        butler.staff.forEach({
            print("\($0.position) - \($0.name)")
            switch $0.position {
            case .garcon: print("vacant?", ($0 as! Garcon).vacant)
            case .cook, .manager: print($0.age)
            }
        })
    }

    func printOrders() {
        orders.forEach{$0.printSelf()}
    }

    // –∑–∞–ø—Ä–æ—Å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
    // TODO: guard –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    func takeGarcon() -> Garcon? {

        let garcons = staff.compactMap{ $0 as? Garcon}

        if garcons.isEmpty {
            print("-- –£ –Ω–∞—Å —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ!")
            return nil
        } else {
            if let garcon = garcons.first(where: {$0.vacant}) { // –Ω–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ
                garcon.vacant = false
                print("-- –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç \(garcon.name), —è –±—É–¥—É –≤–∞—à–∏–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è")
                return garcon
            } else {
                print("-- –ò–∑–≤–∏–Ω—Ç–µ, –≤—Å–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –∑–∞–Ω—è—Ç—ã")
                return nil
            }
        }
    }

    func checkFoodsInRoom(foodList: FoodList) throws {
        print("Checking foods")
        for (food, count) in foodList {
            print("Check", food, count)
            guard let countInRoom = foodRoom[food]  else {
                throw Errors.food(food: food)
            }
            guard countInRoom >= count else {
                throw Errors.count(food: food, count: count, countInRoom: countInRoom)
            }
        }
        // —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –±–ª—é–¥–∞ –∏—Ö –º–æ–∂–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        // –≤ —É—á–µ–±—ã–Ω—ã—Ö —Ü–µ–ª—è—Ö –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –¥—Ä—É–≥–æ–π —Ü–∏–∫–ª
        foodList.forEach {
            print("–±—ã–ª–æ",foodRoom[$0]!)
            foodRoom[$0]! -= $1                     // —Å–º–µ–ª–æ —Ñ–æ—Ä—Å–∏–º, —Ç.–∫. –≤—ã—à—ë –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–ª–∏
            print("—Å—Ç–∞–ª–æ",foodRoom[$0]!)
        }
    }

    func pushToOrders(_ order: Order) {
        orders.insert(order, at: 0)                 // ! –º–µ—Ç–æ–¥ ‚Äú–ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑‚Äù –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑.
                                                    //   –µ—Å–ª–∏ –±—ã –Ω–µ "–Ω–∞—á–∞–ª–æ", —Ç–æ —Å–¥–µ–ª–∞–ª –±—ã += [], a –∏–∑—ã–º—ã–ª –±—ã first
    }
}


// MARK:                        - GO! -

var butler = Butler()

// –∏–µ—Ä–∞—Ä—Ö–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ -- –ê–≥—Ä–µ–≥–∞—Ü–∏—è = –°–ª–∞–±–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è. –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ª—é–¥–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è.
// –ø—Ä–∏—ë–º –Ω–∞ —Ä–∞–±–æ—Ç—É
butler.staff += [Garcon(name: "–ò—Ä–∞", sex: .female, age: 20, rest: butler),
                 Garcon(name: "–ú–∏—à–∞", sex: .male, age: 20, rest: butler),
                 Cook(name: "Juzeppe", sex: .male, age: 40),
                 Confectioner(name: "–ú–∏–ª–∞", sex: .female, age: 30),
                 Cook(name: "–ò–≤–∞–Ω", sex: .male, age: 30)
]

butler.printStaff()

print("\n–ù–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–º —Å–∫–ª–∞–¥–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ \(butler.name) —Å–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –ª–µ–∂–∞—Ç:")
butler.foodRoom.forEach{ print($0, $1) }

// —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π —Ä–µ—à–∏–ª –Ω–µ –∑–∞–º–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è. –≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞—Ä–º–µ—Ä –≤–≤–æ–¥–∏—Ç—å –ø—Ä–∏–¥—ë—Ç—Å—è. –í–µ–¥—å –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –º–µ–Ω—é –Ω–µ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç. –ù–æ —Å–µ–π—á–∞—Å, –Ω–∞–≤–µ—Ä–æ–Ω–æ–µ, —ç—Ç–æ –Ω–µ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ.
print("\n–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ \(butler.name):")
for (type, dishSet) in butler.menu {
    print("\n------------------\n", type)
    for name in dishSet {
        print(name)
    }
}

var busygarcon = [Garcon]()

print("\n-- –û—Ñ–∏—Ü–∏–∞–Ω—Ç!")
if var garcon = butler.takeGarcon() {
    print("-- \(garcon.name), –¥–≤–µ —è–∏—á–Ω–∏—Ü—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –ì–ª–∞–∑—É–Ω—å–∏!")
    garcon.preOrder = [.üç≥,.üç≥]
    print("-- –î–∞, –∏ –∫–æ–∫–Ω–µ–π–ª—å –ö—Ä–æ–≤–∞–≤–∞—è –ú—ç—Ä–∏, —á—É—Ç—å –Ω–µ –∑–∞–±—ã–ª")
    garcon.preOrder += [.ü•§]
    print("-- –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –í–∞—à –∑–∞–∫–∞–∑:", terminator: " ")
    garcon.preOrder.forEach{print($0, terminator: " ")}
}
//butler.printStaff()
print("\n\n-- –û—Ñ–∏—Ü–∏–∞–Ω—Ç!")
if var garcon = butler.takeGarcon() {
    print("-- \(garcon.name), –º–Ω–µ —Å—Ç–µ–π–∫ –∏ –∫–æ–∫—Ç–µ–π–ª—å—á–∏–∫ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –ø–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ...")
    let menuItem = butler.menu[.cocktail]?.randomElement() ?? .ü•§
    print("-- –ù–µ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å \(menuItem)?")
    print("-- –ì–æ–¥–∏—Ç—Å—è!")
    garcon.preOrder = [.ü•©, menuItem]
    print("-- –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –í–∞—à –∑–∞–∫–∞–∑:", terminator: " ")
    garcon.preOrder.forEach{print($0, terminator: " ")}
}
//butler.printStaff()

print("\n\n-- –û—Ñ–∏—Ü–∏–∞–Ω—Ç!")
if var garcon = butler.takeGarcon() {
    let menuItem = butler.menu[.cocktail]?.randomElement() ?? .none
    if menuItem != .none {
        print("-- \(garcon.name), —Ö–æ—á—É \(String(describing: menuItem)), –¥–∞ –ø–æ–±—ã—Å—Ç—Ä–µ–µ!")
    }
    // —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –¥–≤–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –∏ —ç—Ç–æ–º—É —Ç—Ä–µ—å–µ–º—É –≥–æ—Å—Ç—é –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–∞–∑
}
//butler.printStaff()


print("\n -- –û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –ø–æ–Ω–µ—Å–ª–∏ –∑–∞–∫–∞–∑—ã –∫ –∫–∞—Å—Å–µ --")
butler.staff.compactMap{$0 as? Garcon}.forEach { garcon in
    if !garcon.vacant {
        do {
            try garcon.pushOrder()
        }
        catch Errors.sorry(dishName: let name) {print("-- –ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å \(name). –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å :(")}
        catch {print("Error: ??")}

    }
}

butler.printOrders()

print("\n -- –ü–æ–≤–∞—Ä–∞ –Ω–∞—á–∏–Ω–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å --")


// –≤–µ—á–µ—Ä–æ–º –ø—Ä–∏–≤–µ–∑–ª–∏ –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
butler.updateFoodRoom([.salt: 100,
                       .eggs: 100,
                       .potatoes: 100,
                       .onion: 100,
                       .butter: 1,                  // –º–∞—Å–ª–æ –º–∞–ª–æ, —á—Ç–æ–±—ã –≤—Ç–æ—Ä—É—é —è–∏—á–Ω–∏—Ü—É –Ω–µ–ª—å–∑—è –±—ã–ª–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏ —Å—Ä–∞–±–æ—Ç–∞–ª –æ—Ç–∫–∞–∑
                       .meat: 2,
                       .vodka: 100,
                       .sparklingWater: 100,
                       .prosecco: 100,
                       .aperolLiqueur: 100,
                       .tomatoJuice: 100
])
butler.toDB()






//extension Position {
//    var who: String {
//        switch self {
//        case .cook([.salad, .main]):    return String("–®–µ—Ñ")
//        case .cook([.dessert]):         return String("–ö–æ–Ω–¥–∏—Ç–µ—Ä")
//        case .cook(_):                  return Cooking
//        case .manager:                  return String("–ú–µ–Ω–µ–¥–∂–µ—Ä")
//        case .garcon:                   return String("–û—Ñ–∏—Ü–∏–∞–Ω—Ç")
//        }
//    }
//}


//extension Position {
//    var who: MemberOfStaff, Cooking {
//        switch self {
//        case .cook([.salad, .main]):    return Cook.self as! MemberOfStaff
//        case .cook([.dessert]):         return Confectioner.self as! MemberOfStaff
//        case .cook(_):                  return Cook.self as! MemberOfStaff
////        case .manager:                  return Manager.self as! MemberOfStaff
////        case .garcon:                   return Garcon.self as! MemberOfStaff
//        }
//    }
//}

//enum Menu: CaseIterable, Hashable {
//
//    static var allCases: [Menu] {
//        return [.—Å–∞–ª–∞—Ç–¶–µ–∑–∞—Ä—å (type: .salad   , foods: [.eggs    :1]),
//                .–æ–º–ª–µ—Ç       (type: .main    , foods: [.eggs    :2]),
//                .—Å—Ç–µ–π–∫       (type: .main    , foods: [.meat    :1]),
//                .–º–µ–¥–æ–≤–∏–∫     (type: .dessert , foods: [.eggs    :1]),
//                .–∫—Ä–æ–≤–∞–≤–∞—è–ú–µ—Ä–∏(type: .cocktail, foods: [.potatoes:1])
//        ]
//    }
//    case —Å–∞–ª–∞—Ç–¶–µ–∑–∞—Ä—å(type: TypeOfDish, foods: FoodList)                                // CaesarSalad
//    case –æ–º–ª–µ—Ç(type: TypeOfDish, foods: FoodList)                                      // Omelette
//    case —Å—Ç–µ–π–∫(type: TypeOfDish, foods: FoodList)
//    case –º–µ–¥–æ–≤–∏–∫(type: TypeOfDish, foods: FoodList)
//    case –∫—Ä–æ–≤–∞–≤–∞—è–ú–µ—Ä–∏(type: TypeOfDish, foods: FoodList)
//}


//var typeOfDish: TypeOfDish = (.main)
//
//switch typeOfDish {
//case .main, .salad:
//    break
//case .side:
//    break
//case .dessert:
//    break
//case .cocktail:
//    break
//}


//typealias Menu = Dictionary<TypeOfDish, Set<String>>  // –í–Ω—É—Ç—Ä–∏ —Ç–∏–ø–∞ –±–ª—é–¥ –≤—Å–µ –ø—É–Ω–∫—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
//typealias Menu1 = Set<Dish>
//class Person: PersonPr {                            //   –õ—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –Ω–∞–Ω—è—Ç—ã –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
//
//    var name: String
//    var sex: Sex
//    var age: UInt8
//
//    init(name: String, sex: Sex, age: UInt8) {
//        self.name = name
//        self.sex = sex
//        self.age = age
//    }
//}
//
//class MemberOfStaff: Person {                 // MARK: 1.2. –°–æ—Ç—Ä—É–¥–Ω–∏–∫
//    var id: UUID = UUID()                           //   —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª–µ –∫–∞–¥—Ä–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
//    var position: Position                          // ! –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–≤–∞—Ä, –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –∏ —Ç.–¥.)
//    var vacant: Bool = true                         //   —Å—Ç–∞—Ç—É—Å: —Å–≤–æ–±–æ–¥–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –∑–∞–Ω—è—Ç (—É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç)
//
//    init(person: Person, positon: Position) {
//        self.position = positon
//        super.init(name: person.name, sex: person.sex, age: person.age)
//    }
//}

//let membersOfStaff = staff.filter({ $0 is Garcon }) // –≤—ã–¥–µ–ª—è–µ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
